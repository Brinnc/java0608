/*
[자바의 자료형] - 용량을 결정해준다
	-문자 
		문자: char(2)
		문자열: String (객체)
	-숫자
		정수(소수점X): byte(1) < short(2) < ★int(4) < long(8)
		실수(소수점O): float(4) < double(8)
	-논리값
		boolean(1)

!!자바의 3가지 자료형 중 비슷한 자료형 간에는 서로 형변환이 가능함 (문자-숫자)
!!자동형변환- 암시적, 즉 자동으로 형변환
				작은 자료형 -> 큰 자료형
!!강제형변환- 개발자가 cast연산자로 명시해줘야함
				큰 자료형 -> 작은 자료형

*/
//<형변환과 char자료형>

//자바의 문자자료형인 char에 대해 알아보자
class CharTest{ //메인메서드가 필수적인 건 아님
	//메인 메서드는 java.exe가 호출될 때 찾아나서는 실행부 메서드
	public static void main(String[] args){
		//int x=3; 
		//char c='A';
		//System.out.println(c);

		int k=7;
		byte b=5;
		//k=b;

		// = : 오른쪽을 왼쪽에 대입함
		//손실을 감당하고서라도 자료형의 변환을 강제하는 현상을 가리켜 강제형변환이라 함
		//특히 큰 자료형에서 작은 자료형으로의 형변환의 경우
		//개발자는 작은 자료형으로의 형변환을 명시하는 cast연산자를 적용해야함 
		//(강제형변환 cast연산자)
		//b=(byte)k;

		short s=17; 
		byte m=6;
		s=m; //자동형변환 (★원칙: int 이하에서만 발생, int보다 큰 용량인 long에서는 데이터의 손실이 있을 수 있으므로)
		//위의 코드의 경우 모든 연산자 뿐만 아니라 '='연산자도 피연산자의 자료형이 동일할 때만 동작될 수 있음
		//따라서 아래의 연산에서 둘 중 하나를 형변환하여 연산을 수행할 수 밖에 없는데
		//이 때 기준은 데이터의 손실이 발생하지 않아야하므로 작은 자료형을 큰 자료형에 맞추어 자동형변환이 발생함
		//이러한 현상을 자동형변환이라 하며ㅡ 자동형변환은 손실이 발생하지 않기 때문에 개발자가 casting처리를 할 필요도 없으며
		//언어차원에서 자동으로 처리됨. 

		//boolean y=true; //
		//int z=5;
		//z=y;

		long p=76;
		short u=34;
		p=u;
		//결론: 자바의 3가지 자료형 중 숫자형끼리는 사실 용량만 다를 뿐 같은 자료형임

		char r='V';
		char n=97; //아스키코드97=소문자 a,  따라서 에러 안남
		//결론: 자바 언어 뿐만 아니라 사실상 모든 프로그래밍 언어에서 문자란 존재하지 않는다
		//결국 모두 사실상 숫자라고 할 수 있음(컴퓨터는 내부적으로 아스키코드를 통해 이해하기 때문)
		//주의! char형이 비록 숫자형이긴해도 주사용목적은 아스키나 유니코드와 같은 문자체계의 음수아닌 숫자만을 담기위한 목적의 자료형이므로
		//char형을 수치연산에 사용하면 안됨
		//char: 2의 16승가지
		//!! 주의 : char를 숫자자료형에 담는 것은 가능하지만 반대로 음수까지 표현 가능한 short를 char에 담을 수 는 없음
		//char x=
		//short y=
	

		//아스키코드 < 유니코드

		long x1=6;
		long x2=7;


	}
	
}